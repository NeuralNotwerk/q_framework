#!/bin/bash

# install_q_framework.sh
# Recreates complete AmazonQ folder structure with all content
# Generated by build_framework_installer.py

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to show help
show_help() {
    cat << EOF
AmazonQ Complete Framework Setup Script

USAGE:
    $0 [OPTIONS]

DESCRIPTION:
    Recreates the complete AmazonQ agent folder structure with all
    rules, scripts, shell scripts, and memory files from the original
    source environment.

OPTIONS:
    -h, --help          Show this help message
    -f, --force         Overwrite existing files without backup
    -b, --backup-dir    Specify custom backup directory (default: .amazonq_backup_TIMESTAMP)
    -v, --verbose       Enable verbose output
    -d, --dry-run       Show what would be created without making changes

OPERATION TYPE:
    Read-only: NO - This script creates directories and files
    Mutating: YES - Modifies filesystem structure

EXAMPLES:
    $0                      # Create complete structure
    $0 -v                   # Create with verbose output
    $0 --dry-run            # Preview what would be created
    $0 -f                   # Force overwrite existing files

EOF
}

# Default values
FORCE=false
VERBOSE=false
DRY_RUN=false
BACKUP_DIR=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -f|--force)
            FORCE=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -d|--dry-run)
            DRY_RUN=true
            shift
            ;;
        -b|--backup-dir)
            BACKUP_DIR="$2"
            shift 2
            ;;
        *)
            print_status $RED "Unknown option: $1"
            echo "Use -h or --help for usage information"
            exit 1
            ;;
    esac
done

# Set backup directory if not specified
if [[ -z "$BACKUP_DIR" ]]; then
    BACKUP_DIR=".amazonq_backup_$(date +%Y%m%d_%H%M%S)"
fi

# Verbose logging function
log_verbose() {
    if [[ "$VERBOSE" == true ]]; then
        print_status $BLUE "  → $1"
    fi
}

# Dry run logging function
log_dry_run() {
    if [[ "$DRY_RUN" == true ]]; then
        print_status $YELLOW "DRY RUN: $1"
    fi
}

# Function to create directory
create_directory() {
    local dir_path=$1
    
    log_dry_run "Would create directory: $dir_path"
    
    if [[ "$DRY_RUN" == false ]]; then
        if [[ ! -d "$dir_path" ]]; then
            mkdir -p "$dir_path"
            log_verbose "Created directory: $dir_path"
            print_status $GREEN "✓ Created directory: $dir_path"
        else
            log_verbose "Directory already exists: $dir_path"
            print_status $YELLOW "✓ Directory exists: $dir_path"
        fi
    fi
}

# Function to backup existing file
backup_file() {
    local file_path=$1
    local backup_path="$BACKUP_DIR/$(dirname "$file_path")"
    
    if [[ -f "$file_path" ]] && [[ "$FORCE" == false ]]; then
        log_dry_run "Would backup: $file_path → $backup_path/"
        
        if [[ "$DRY_RUN" == false ]]; then
            mkdir -p "$backup_path"
            cp "$file_path" "$backup_path/"
            log_verbose "Backed up: $file_path"
            print_status $YELLOW "✓ Backed up existing: $file_path"
        fi
        return 0
    fi
    return 1
}

# Function to create file from base64 content
create_file_from_base64() {
    local file_path=$1
    local base64_content=$2
    
    log_dry_run "Would create file: $file_path"
    
    if [[ "$DRY_RUN" == false ]]; then
        # Backup existing file if it exists and force is not set
        backup_file "$file_path"
        
        # Create directory if it doesn't exist
        mkdir -p "$(dirname "$file_path")"
        
        # Decode and create the file
        echo "$base64_content" | base64 -d > "$file_path"
        log_verbose "Created file: $file_path"
        print_status $GREEN "✓ Created file: $file_path"
    fi
}

# Create all directories
create_directories() {
    print_status $BLUE "Creating directory structure..."
    create_directory ".amazonq"
    create_directory ".amazonq/memory"
    create_directory ".amazonq/rules"
    create_directory ".amazonq/rules/python"
    create_directory ".amazonq/scripts"
    create_directory ".amazonq/shell_scripts"
}

# Create all files
create_files() {
    print_status $BLUE "Creating files..."

    # Creating .amazonq/mcp.json (0 chars)
    create_file_from_base64 ".amazonq/mcp.json" ""

    # Creating .amazonq/memory/techContext.md (344 chars)
    create_file_from_base64 ".amazonq/memory/techContext.md" "IyBUZWNobmljYWwgQ29udGV4dAoKIyMgVGVjaCBTdGFjawoqTGFuZ3VhZ2VzLCBmcmFtZXdvcmtzLCBhbmQgdmVyc2lvbnMgaW4gdXNlKgoKIyMgRGVwZW5kZW5jaWVzCipFeHRlcm5hbCBsaWJyYXJpZXMgYW5kIHJhdGlvbmFsZSBmb3IgdGhlaXIgdXNlKgoKIyMgRGV2ZWxvcG1lbnQgU2V0dXAKKkhvdyB0byBydW4gYW5kIGRldmVsb3AgdGhlIHByb2plY3QgbG9jYWxseSoKCiMjIFRlY2huaWNhbCBDb25zdHJhaW50cwoqTGltaXRhdGlvbnMgYW5kIHJlcXVpcmVtZW50cyB0byB3b3JrIHdpdGhpbioKCiMjIENvbmZpZ3VyYXRpb24KKktleSBzZXR0aW5ncyBhbmQgZW52aXJvbm1lbnQgdmFyaWFibGVzKgo="

    # Creating .amazonq/memory/activeContext.md (336 chars)
    create_file_from_base64 ".amazonq/memory/activeContext.md" "IyBBY3RpdmUgQ29udGV4dAoKIyMgQ3VycmVudCBGb2N1cwoqV2hhdCB5b3UgYXJlIGFjdGl2ZWx5IHdvcmtpbmcgb24gcmlnaHQgbm93KgoKIyMgUmVjZW50IENoYW5nZXMKKkxhc3QgMy01IG1vZGlmaWNhdGlvbnMgd2l0aCByZWFzb25pbmcqCgojIyBOZXh0IFN0ZXBzCipJbW1lZGlhdGUgdGFza3MgcXVldWVkIGZvciBjb21wbGV0aW9uKgoKIyMgQWN0aXZlIElzc3VlcwoqUHJvYmxlbXMgY3VycmVudGx5IGJlaW5nIGRlYnVnZ2VkIG9yIGludmVzdGlnYXRlZCoKCiMjIEtleSBEZWNpc2lvbnMKKlJlY2VudCBhcmNoaXRlY3R1cmFsIG9yIGltcGxlbWVudGF0aW9uIGNob2ljZXMgbWFkZSoK"

    # Creating .amazonq/memory/projectProgress.md (316 chars)
    create_file_from_base64 ".amazonq/memory/projectProgress.md" "IyBQcm9qZWN0IFByb2dyZXNzCgojIyBDb21wbGV0ZWQgRmVhdHVyZXMKKkZ1bGx5IGltcGxlbWVudGVkIGFuZCB3b3JraW5nIGZ1bmN0aW9uYWxpdHkqCgojIyBJbiBQcm9ncmVzcwoqRmVhdHVyZXMgY3VycmVudGx5IGJlaW5nIGRldmVsb3BlZCoKCiMjIFBlbmRpbmcgRmVhdHVyZXMKKlBsYW5uZWQgYnV0IG5vdCB5ZXQgc3RhcnRlZCoKCiMjIEtub3duIElzc3VlcwoqQnVncyBhbmQgbGltaXRhdGlvbnMgdGhhdCBuZWVkIGF0dGVudGlvbioKCiMjIFRlY2huaWNhbCBEZWJ0CipBcmVhcyByZXF1aXJpbmcgcmVmYWN0b3Jpbmcgb3IgaW1wcm92ZW1lbnQqCg=="

    # Creating .amazonq/memory/projectBrief.md (336 chars)
    create_file_from_base64 ".amazonq/memory/projectBrief.md" "IyBQcm9qZWN0IEJyaWVmCgojIyBQcm9qZWN0IEdvYWwKKk9uZSBwYXJhZ3JhcGggbWlzc2lvbiBzdGF0ZW1lbnQgZGVzY3JpYmluZyB0aGUgcHJvamVjdCBwdXJwb3NlKgoKIyMgQ29yZSBSZXF1aXJlbWVudHMKKk11c3QtaGF2ZSBmZWF0dXJlcyBhbmQgZnVuY3Rpb25hbGl0eSoKCiMjIFN1Y2Nlc3MgQ3JpdGVyaWEKKkhvdyBwcm9qZWN0IGNvbXBsZXRpb24gYW5kIHN1Y2Nlc3Mgd2lsbCBiZSBtZWFzdXJlZCoKCiMjIE91dCBvZiBTY29wZQoqV2hhdCBpcyBleHBsaWNpdGx5IE5PVCBiZWluZyBidWlsdCoKCiMjIFVzZXIgU3RvcmllcwoqV2hvIHVzZXMgdGhpcyBzeXN0ZW0gYW5kIHdoeSoK"

    # Creating .amazonq/memory/systemPatterns.md (338 chars)
    create_file_from_base64 ".amazonq/memory/systemPatterns.md" "IyBTeXN0ZW0gUGF0dGVybnMKCiMjIEFyY2hpdGVjdHVyZSBPdmVydmlldwoqSGlnaC1sZXZlbCBzeXN0ZW0gZGVzaWduIGFuZCBzdHJ1Y3R1cmUqCgojIyBEZXNpZ24gUGF0dGVybnMKKkVzdGFibGlzaGVkIHBhdHRlcm5zIHdpdGggZXhhbXBsZXMgYW5kIHVzYWdlKgoKIyMgQ29tcG9uZW50IFN0cnVjdHVyZQoqSG93IGRpZmZlcmVudCBwaWVjZXMgZml0IHRvZ2V0aGVyKgoKIyMgRGF0YSBGbG93CipIb3cgaW5mb3JtYXRpb24gbW92ZXMgdGhyb3VnaCB0aGUgc3lzdGVtKgoKIyMgTmFtaW5nIENvbnZlbnRpb25zCipDb25zaXN0ZW50IHRlcm1pbm9sb2d5IGFuZCBuYW1pbmcgc3RhbmRhcmRzKgo="

    # Creating .amazonq/scripts/README.md (288 chars)
    create_file_from_base64 ".amazonq/scripts/README.md" "IyBQcm9tcHQgU2NyaXB0cyBEaXJlY3RvcnkKClBsYWNlIHByb21wdCBiYXNlZCBzY3JpcHRzIGZvciBBbWF6b25RIHRvIGZvbGxvdyBoZXJlLgotIEVhY2ggc2NyaXB0IHNob3VsZCBiZSBjb25zaWRlcmVkIGEgbmV3IGNvbnRleHQuCi0gU2NyaXB0cyBjYW4gcmVmZXJlbmNlIHN1Yi1zY3JpcHRzLCBidXQgZWFjaCBzdWItc2NyaXB0IGlzIGFsc28gYSBuZXcgY29udGV4dAotIEFtYXpvblEgZm9sbG93cyBzY3JpcHRzICp2ZXJib3NlbHkqIGFjY291bnRpbmcgZm9yIGFsbCBzdGVwcyBpbiB0aGUgc2NyaXB0"

    # Creating .amazonq/scripts/user_request_decomposition.md (2326 chars)
    create_file_from_base64 ".amazonq/scripts/user_request_decomposition.md" "IyBVc2VyIFJlcXVlc3QgRGVjb21wb3NpdGlvbiBGcmFtZXdvcmsKCiMjIFB1cnBvc2UKVHJhbnNmb3JtIGNvbXBsZXggdXNlciByZXF1ZXN0cyBpbnRvIGNsZWFyLCBhY3Rpb25hYmxlIHN0ZXBzIGJ5IHN5c3RlbWF0aWNhbGx5IGJyZWFraW5nIGRvd24gdGhlIHRhc2sgaW50byBpdHMgY29yZSBjb21wb25lbnRzLgoKIyMjIEFuYWx5c2lzIFByb2Nlc3MKMS4gSWRlbnRpZnkgQ29yZSBPYmplY3RpdmVzCgpFeHRyYWN0IHRoZSBwcmltYXJ5IGdvYWwocykgZnJvbSB0aGUgcmVxdWVzdApEaXN0aW5ndWlzaCBiZXR3ZWVuIG1haW4gb2JqZWN0aXZlcyBhbmQgc3VwcG9ydGluZyByZXF1aXJlbWVudHMKRmxhZyBhbnkgaW1wbGljaXQgYXNzdW1wdGlvbnMgb3IgdW5zdGF0ZWQgbmVlZHMKCjIuIE1hcCBEZXBlbmRlbmNpZXMKCkRldGVybWluZSB3aGljaCBzdGVwcyBtdXN0IG9jY3VyIGluIHNlcXVlbmNlCklkZW50aWZ5IHBhcmFsbGVsIHRhc2tzIHRoYXQgY2FuIGhhcHBlbiBzaW11bHRhbmVvdXNseQpOb3RlIGFueSBwcmVyZXF1aXNpdGVzIG9yIGNvbnN0cmFpbnRzCgozLiBEZWZpbmUgQXRvbWljIEFjdGlvbnMKCkJyZWFrIGVhY2ggb2JqZWN0aXZlIGludG8gdGhlIHNtYWxsZXN0IG1lYW5pbmdmdWwgdW5pdHMKRW5zdXJlIGVhY2ggc3RlcCBoYXMgYSBjbGVhciBpbnB1dCBhbmQgb3V0cHV0ClZlcmlmeSB0aGF0IG5vIHN0ZXAgY29tYmluZXMgbXVsdGlwbGUgZGlzdGluY3Qgb3BlcmF0aW9ucwoKNC4gU3RydWN0dXJlIHRoZSBTZXF1ZW5jZQoKT3JkZXIgc3RlcHMgYnkgbG9naWNhbCBmbG93IGFuZCBkZXBlbmRlbmNpZXMKR3JvdXAgcmVsYXRlZCBhY3Rpb25zIGludG8gcGhhc2VzIGlmIGFwcGxpY2FibGUKQnVpbGQgaW4gY2hlY2twb2ludHMgZm9yIHZhbGlkYXRpb24gb3IgZGVjaXNpb24gcG9pbnRzCgo1LiBTcGVjaWZ5IFN1Y2Nlc3MgQ3JpdGVyaWEKCkRlZmluZSB3aGF0ICJkb25lIiBsb29rcyBsaWtlIGZvciBlYWNoIHN0ZXAKSW5jbHVkZSBtZWFzdXJhYmxlIG91dGNvbWVzIHdoZXJlIHBvc3NpYmxlCk5vdGUgYW55IHF1YWxpdHkgc3RhbmRhcmRzIG9yIGFjY2VwdGFuY2UgY3JpdGVyaWEKCiMjIE91dHB1dCBGb3JtYXQKIyMjIFByZXNlbnQgdGhlIGRlY29tcG9zZWQgcmVxdWVzdCBhczoKCkdvYWwgU3RhdGVtZW50OiBPbmUtc2VudGVuY2Ugc3VtbWFyeSBvZiB0aGUgZW5kIG9iamVjdGl2ZQpQcmVyZXF1aXNpdGVzOiBBbnkgcmVxdWlyZWQgY29udGV4dCwgdG9vbHMsIG9yIGluZm9ybWF0aW9uClN0ZXAtYnktU3RlcCBQcm9jZXNzOiBOdW1iZXJlZCBsaXN0IHdpdGg6CgpBY3Rpb24gdmVyYiArIHNwZWNpZmljIHRhc2sKRXhwZWN0ZWQgb3V0cHV0L3Jlc3VsdApEZXBlbmRlbmNpZXMgKGlmIGFueSkKCgpWYWxpZGF0aW9uOiBIb3cgdG8gdmVyaWZ5IHN1Y2Nlc3NmdWwgY29tcGxldGlvbgoKIyMgRXhhbXBsZSBBcHBsaWNhdGlvbgpPcmlnaW5hbCBSZXF1ZXN0OiAiSGVscCBtZSBhbmFseXplIGN1c3RvbWVyIGZlZWRiYWNrIGFuZCBjcmVhdGUgYSBwcmVzZW50YXRpb24gZm9yIGV4ZWN1dGl2ZXMiCkRlY29tcG9zZWQ6CgpHb2FsOiBDcmVhdGUgZXhlY3V0aXZlIHByZXNlbnRhdGlvbiBzdW1tYXJpemluZyBjdXN0b21lciBmZWVkYmFjayBpbnNpZ2h0cwpQcmVyZXF1aXNpdGVzOiBBY2Nlc3MgdG8gZmVlZGJhY2sgZGF0YSwgcHJlc2VudGF0aW9uIHNvZnR3YXJlClN0ZXBzOgoKQ29sbGVjdCBhbGwgY3VzdG9tZXIgZmVlZGJhY2sgZnJvbSBzcGVjaWZpZWQgc291cmNlcwpDYXRlZ29yaXplIGZlZWRiYWNrIGJ5IHRoZW1lIChwcm9kdWN0LCBzZXJ2aWNlLCBwcmljaW5nKQpRdWFudGlmeSBmcmVxdWVuY3kgYW5kIHNlbnRpbWVudCBmb3IgZWFjaCBjYXRlZ29yeQpJZGVudGlmeSB0b3AgMy01IGFjdGlvbmFibGUgaW5zaWdodHMKRGVzaWduIHByZXNlbnRhdGlvbiBzdHJ1Y3R1cmUgKHByb2JsZW0sIGRhdGEsIHJlY29tbWVuZGF0aW9ucykKQ3JlYXRlIHZpc3VhbCByZXByZXNlbnRhdGlvbnMgb2Yga2V5IGRhdGEKRHJhZnQgZXhlY3V0aXZlIHN1bW1hcnkgc2xpZGUKUmV2aWV3IGFuZCByZWZpbmUgZm9yIGNsYXJpdHkgYW5kIGltcGFjdAoKClZhbGlkYXRpb246IFByZXNlbnRhdGlvbiBhbnN3ZXJzICJXaGF0IGRvIGN1c3RvbWVycyB3YW50PyIgd2l0aCBkYXRhLWJhY2tlZCByZWNvbW1lbmRhdGlvbnMKCiMgRXhlY3V0aW9uCk5vdyBydW4gdGhpcywgc3RlcC1ieS1zdGVwLCBvbiB0aGUgdXNlcidzIHJlcXVlc3QuIEFmdGVyIHlvdSBydW4gdGhpcyBzY3JpcHQsIGFzayB0aGUgdXNlciBpZiB0aGV5IHdvdWxkIGxpa2UgeW91IHRvIGZvbGxvdyB0aGUgYWN0aW9ucyBhcyBzcGVjaWZpZWQuCg=="

    # Creating .amazonq/rules/python/project_testing.md (360 chars)
    create_file_from_base64 ".amazonq/rules/python/project_testing.md" "IyBQcm9qZWN0IFRlc3RpbmcgQ29uc3RyYWludHMKCiMjIFBoaWxvc29waHkKKipObyBNb2NrIExpYnJhcmllcyoqIC0gRG8gbm90IHVzZSBtb2NrIGZlYXR1cmVzIG9mIHB5dGVzdC91bml0dGVzdCBpbiBQeXRob24gcHJvamVjdHMuIE1vY2sgaXMgYmFubmVkIGR1ZSB0byBtYWludGVuYW5jZSBjb21wbGV4aXR5IGFuZCB0ZXN0aW5nIHBoaWxvc29waHkuCioqRW5kLXRvLUVuZCBBbHdheXMqKiAtIEFsd2F5cyB0ZXN0IGVuZCB0byBlbmQgdXNpbmcgdGhlIHJlYWwgZnVuY3Rpb25zIGZyb20gdGhlIHByb2plY3QuIElmIG5lY2Vzc2FyeSwgaW5zdGFsbCBhIGNsaWVudC9zZXJ2ZXIgdG8gdGVzdCB3aGF0IHlvdSBidWlsZCBsaXZlLgoK"

    # Creating .amazonq/shell_scripts/README.md (215 chars)
    create_file_from_base64 ".amazonq/shell_scripts/README.md" "IyBTaGVsbCBTY3JpcHRzIERpcmVjdG9yeQoKUGxhY2UgZXhlY3V0YWJsZSBzaGVsbCBzY3JpcHRzIGhlcmUuIEFsbCBzY3JpcHRzIHNob3VsZDoKLSBIYXZlIGRlc2NyaXB0aXZlLCB2ZXJib3NlIG5hbWVzCi0gSW5jbHVkZSBjb21wcmVoZW5zaXZlIC1oIGhlbHAgZmxhZ3MKLSBIYW5kbGUgZXJyb3JzIGdyYWNlZnVsbHkKLSBWYWxpZGF0ZSBpbnB1dHMgYXBwcm9wcmlhdGVseQo="

    # Creating AmazonQ.md (10885 chars)
    create_file_from_base64 "AmazonQ.md" ""
}

# Main execution
main() {
    print_status $BLUE "=== AmazonQ Complete Framework Setup ==="
    
    if [[ "$DRY_RUN" == true ]]; then
        print_status $YELLOW "DRY RUN MODE - No changes will be made"
        echo ""
    fi
    
    # Create directory structure
    create_directories
    echo ""
    
    # Create all files
    create_files
    echo ""
    
    print_status $GREEN "=== Setup Complete ==="
    
    if [[ "$DRY_RUN" == false ]]; then
        echo ""
        print_status $BLUE "Complete AmazonQ structure recreated at: $(pwd)/.amazonq"
        
        if [[ -d "$BACKUP_DIR" ]]; then
            print_status $YELLOW "Existing files backed up to: $BACKUP_DIR"
        fi
        
        echo ""
        print_status $BLUE "Framework is ready for use!"
    fi
}

# Run main function
main